{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["bankOne","keyCode","keyTrigger","id","url","color","DrawDrum","props","list","map","item","className","style","backgroundColor","onClick","sound","src","text","InnerText","App","state","playSound","bind","handleKeyPress","document","addEventListener","this","removeEventListener","getElementById","play","setState","innerText","e","updatedList","filter","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAGMA,G,MAAU,CAAC,CACbC,QAAS,GACTC,WAAY,IACZC,GAAI,WACJC,IAAK,2DACLC,MAAO,WACN,CACDJ,QAAS,GACTC,WAAY,IACZC,GAAI,WACJC,IAAK,2DACLC,MAAO,WACN,CACDJ,QAAS,GACTC,WAAY,IACZC,GAAI,WACJC,IAAK,2DACLC,MAAO,WACN,CACDJ,QAAS,GACTC,WAAY,IACZC,GAAI,WACJC,IAAK,6DACLC,MAAO,WACN,CACDJ,QAAS,GACTC,WAAY,IACZC,GAAI,OACJC,IAAK,2DACLC,MAAO,WACN,CACDJ,QAAS,GACTC,WAAY,IACZC,GAAI,UACJC,IAAK,yDACLC,MAAO,WACN,CACDJ,QAAS,GACTC,WAAY,IACZC,GAAI,cACJC,IAAK,6DACLC,MAAO,WACN,CACDJ,QAAS,GACTC,WAAY,IACZC,GAAI,OACJC,IAAK,6DACLC,MAAO,WACN,CACDJ,QAAS,GACTC,WAAY,IACZC,GAAI,YACJC,IAAK,yDACLC,MAAO,aAILC,EAAW,SAACC,GACd,OACI,yBAAKJ,GAAG,gBACN,4CACA,yBAAKA,GAAG,WACLI,EAAMC,KAAKC,IAAI,SAAAC,GAAI,OAClB,yBACEC,UAAU,WACVC,MAAO,CAACC,gBAAgBH,EAAKL,OAC7BF,GAAIO,EAAKP,GACTW,QAAS,kBAAMP,EAAMQ,MAAML,EAAKR,WAAYQ,EAAKP,MAE9CO,EAAKR,WACN,2BAAOc,IAAKN,EAAKN,IAAKO,UAAU,OAAOR,GAAIO,EAAKR,gBAGxD,kBAAC,EAAD,CAAWe,KAAMV,EAAMU,QAEvB,2CAKJC,EAAY,SAACX,GACjB,OACE,0BAAMJ,GAAG,aAAT,IAAuBI,EAAMU,KAA7B,MAqCWE,E,YAjCb,WAAYZ,GAAQ,IAAD,8BACjB,4CAAMA,KACDa,MAAQ,CACXZ,KAAMR,GAER,EAAKqB,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBANL,E,iFASjBE,SAASC,iBAAiB,UAAWC,KAAKH,kB,6CAG1CC,SAASG,oBAAoB,UAAWD,KAAKH,kB,gCAErCpB,EAAIc,GACZO,SAASI,eAAezB,GAAI0B,OAC5BH,KAAKI,SAAU,CACZC,UAAWd,M,qCAGDe,GACb,IAAMC,EAAcP,KAAKN,MAAMZ,KAAK0B,OAAO,SAAAxB,GAAI,OAAIA,EAAKT,UAAY+B,EAAE/B,UACtEyB,KAAKL,UAAUY,EAAY,GAAG/B,WAAW+B,EAAY,GAAG9B,M,+BAG1D,OACE,yBAAKQ,UAAU,OACb,kBAAC,EAAD,CAAUH,KAAMkB,KAAKN,MAAMZ,KAAMO,MAAOW,KAAKL,UAAWJ,KAAMS,KAAKN,MAAMW,iB,GA5B7DI,IAAMC,WC5EJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASnB,SAASI,eAAe,SD2H3C,kBAAmBgB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.477695c1.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst bankOne = [{\n    keyCode: 81,\n    keyTrigger: 'Q',\n    id: 'Heater-1',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3',\n    color: '#FF5252'\n  }, {\n    keyCode: 87,\n    keyTrigger: 'W',\n    id: 'Heater-2',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3',\n    color: '#607D8B'\n  }, {\n    keyCode: 69,\n    keyTrigger: 'E',\n    id: 'Heater-3',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3',\n    color: '#FF4081'\n  }, {\n    keyCode: 65,\n    keyTrigger: 'A',\n    id: 'Heater-4',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3',\n    color: '#536DFE'\n  }, {\n    keyCode: 83,\n    keyTrigger: 'S',\n    id: 'Clap',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3',\n    color: '#795548'\n  }, {\n    keyCode: 68,\n    keyTrigger: 'D',\n    id: 'Open-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3',\n    color: '#448AFF'\n  }, {\n    keyCode: 90,\n    keyTrigger: 'Z',\n    id: \"Kick-n'-Hat\",\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3',\n    color: '#FF9800'\n  }, {\n    keyCode: 88,\n    keyTrigger: 'X',\n    id: 'Kick',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3',\n    color: '#673AB7'\n  }, {\n    keyCode: 67,\n    keyTrigger: 'C',\n    id: 'Closed-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3',\n    color: '#FF5722'\n  },\n];\n\nconst DrawDrum = (props) => {\n    return (\n        <div id=\"drum-machine\">\n          <h1>Drum Machine</h1>\n          <div id=\"display\">\n            {props.list.map(item =>\n              <div \n                className=\"drum-pad\" \n                style={{backgroundColor:item.color}} \n                id={item.id}\n                onClick={() => props.sound(item.keyTrigger, item.id)}\n                >\n                  {item.keyTrigger}\n                  <audio src={item.url} className=\"clip\" id={item.keyTrigger}></audio>\n              </div>\n            )}\n          <InnerText text={props.text} /> \n          </div>\n          <p>artdor1978</p>\n        </div>\n    );\n };\n\nconst InnerText = (props) => {\n  return (\n    <span id=\"innerText\"> {props.text} </span>)  \n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      list: bankOne,\n    };\n    this.playSound = this.playSound.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyPress)\n  }\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyPress)\n  }\n  playSound(id, text) {\n    document.getElementById(id).play();\n    this.setState ({\n       innerText: text,\n     });\n  }\n  handleKeyPress(e) {\n    const updatedList = this.state.list.filter(item => item.keyCode === e.keyCode);\n    this.playSound(updatedList[0].keyTrigger,updatedList[0].id);\n  }\n  render() {\n  return (\n    <div className=\"App\">\n      <DrawDrum list={this.state.list} sound={this.playSound} text={this.state.innerText}/>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nif (module.hot) {\n\tmodule.hot.accept();\n}\n"],"sourceRoot":""}